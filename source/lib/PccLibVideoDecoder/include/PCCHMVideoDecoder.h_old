/* The copyright in this software is being made available under the BSD
 * License, included below. This software may be subject to other third party
 * and contributor rights, including patent rights, and no such rights are
 * granted under this license.
 *
 * Copyright (c) 2010-2017, ISO/IEC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *  * Neither the name of the ISO/IEC nor the names of its contributors may
 *    be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef PCCHMVideoDecoder_h
#define PCCHMVideoDecoder_h

#include "PCCCommon.h"

#ifdef USE_HM_VIDEO_CODEC
#include "PCCVideo.h"
#include "PCCVirtualVideoDecoder.h"

#include <TLibCommon/TComList.h>
#include <TLibCommon/TComPicYuv.h>
#include <TLibDecoder/AnnexBread.h>
#include <TLibDecoder/NALread.h>
#include <TLibDecoder/TDecTop.h>

namespace pcc {

class PCCHMVideoDecoder : public PCCVirtualVideoDecoder {
 public:
  PCCHMVideoDecoder() {}
  ~PCCHMVideoDecoder() {}

  void setVideoSize( const TComSPS& sps ){
    auto& window = sps.getConformanceWindow(); 
    int width = sps.getPicWidthInLumaSamples();
    int height = sps. getPicHeightInLumaSamples();
    m_outputWidth =  width - window.getWindowLeftOffset() - window.getWindowRightOffset();   
    m_outputHeight = height - window.getWindowTopOffset() - window.getWindowBottomOffset();       
    m_internalBitDepths = sps.getBitDepths().recon[CHANNEL_TYPE_LUMA];    
  }

  template <typename T>
  void decode( std::istream& stream, size_t OutputBitDepth, bool bRGB2GBR, PCCVideo<T, 3>& video ) {
    int                 poc{};
    TComList<TComPic*>* pcListPic = nullptr;
    m_bRGB2GBR = bRGB2GBR;

    InputByteStream bytestream( stream );

    if ( OutputBitDepth ) {
      m_outputBitDepth[CHANNEL_TYPE_LUMA]   = OutputBitDepth;
      m_outputBitDepth[CHANNEL_TYPE_CHROMA] = OutputBitDepth;
    }
    // create & initialize internal classes
    m_cTDecTop.create();
    m_cTDecTop.init();
    m_cTDecTop.setDecodedPictureHashSEIEnabled( 0 );

    // set the last displayed POC correctly for skip forward.
    m_iPOCLastDisplay += m_iSkipFrame;

    // reconstruction file not yet opened. (must be performed after SPS is seen)
    bool loopFiltered = false;

    // main decoder loop
    while ( !!stream ) {
      /* location serves to work around a design fault in the decoder, whereby
       * the process of reading a new slice that is the first slice of a new
       * frame
       * requires the TDecTop::decode() method to be called again with the same
       * nal unit. */
      streampos   location = stream.tellg();
      AnnexBStats stats    = AnnexBStats();

      InputNALUnit nalu;
      byteStreamNALUnit( bytestream, nalu.getBitstream().getFifo(), stats );

      // call actual decoding function
      bool bNewPicture = false;
      if ( nalu.getBitstream().getFifo().empty() ) {
        cout << "Warning: Attempt to decode an empty NAL unit\n";
      } else {
        read( nalu );
        bNewPicture = m_cTDecTop.decode( nalu, m_iSkipFrame, m_iPOCLastDisplay );
        if ( bNewPicture ) {
          stream.clear();
          stream.seekg( location - streamoff( 3 ) );
          bytestream.reset();
        }
      }

      if ( ( bNewPicture || !stream || nalu.m_nalUnitType == NAL_UNIT_EOS ) && !m_cTDecTop.getFirstSliceInSequence() ) {
        if ( !loopFiltered || stream ) {
          m_cTDecTop.executeLoopFilters( poc, pcListPic );
          if ( pcListPic ) { auto* pcPic = pcListPic->back(); }
        }
        loopFiltered = ( nalu.m_nalUnitType == NAL_UNIT_EOS );
        if ( nalu.m_nalUnitType == NAL_UNIT_EOS ) { m_cTDecTop.setFirstSliceInSequence( true ); }
      } else if ( ( bNewPicture || !stream || nalu.m_nalUnitType == NAL_UNIT_EOS ) &&
                  m_cTDecTop.getFirstSliceInSequence() ) {
        m_cTDecTop.setFirstSliceInPicture( true );
      }
      if ( pcListPic ) {
        if ( m_outputBitDepth.front() == 0 ) {
          const auto& recon = pcListPic->front()->getPicSym()->getSPS().getBitDepths().recon;
          copy( cbegin( recon ), cend( recon ), begin( m_outputBitDepth ) );
        }

        if ( bNewPicture ) {
          setVideoSize( pcListPic->front()->getPicSym()->getSPS() );
          xWriteOutput( *pcListPic, nalu.m_temporalId, video );
        }
        if ( ( bNewPicture || nalu.m_nalUnitType == NAL_UNIT_CODED_SLICE_CRA ) &&
             m_cTDecTop.getNoOutputPriorPicsFlag() ) {
          m_cTDecTop.checkNoOutputPriorPics( pcListPic );
          m_cTDecTop.setNoOutputPriorPicsFlag( false );
        }
        if ( bNewPicture && ( nalu.m_nalUnitType == NAL_UNIT_CODED_SLICE_IDR_W_RADL ||
                              nalu.m_nalUnitType == NAL_UNIT_CODED_SLICE_IDR_N_LP ||
                              nalu.m_nalUnitType == NAL_UNIT_CODED_SLICE_BLA_N_LP ||
                              nalu.m_nalUnitType == NAL_UNIT_CODED_SLICE_BLA_W_RADL ||
                              nalu.m_nalUnitType == NAL_UNIT_CODED_SLICE_BLA_W_LP ) ) {
          setVideoSize( pcListPic->front()->getPicSym()->getSPS() );
          xFlushOutput( *pcListPic, video );
        }
        if ( nalu.m_nalUnitType == NAL_UNIT_EOS ) {
          setVideoSize( pcListPic->front()->getPicSym()->getSPS() );
          xWriteOutput( *pcListPic, nalu.m_temporalId, video );
          m_cTDecTop.setFirstSliceInPicture( false );
        }
        // write reconstruction to file -- for additional bumping as defined in
        // C.5.2.3
        if ( !bNewPicture && nalu.m_nalUnitType >= NAL_UNIT_CODED_SLICE_TRAIL_N &&
             nalu.m_nalUnitType <= NAL_UNIT_RESERVED_VCL31 ) {
          setVideoSize( pcListPic->front()->getPicSym()->getSPS() );
          xWriteOutput( *pcListPic, nalu.m_temporalId, video );
        }
      }
    }
    xFlushOutput( *pcListPic, video );
    m_cTDecTop.deletePicBuffer();
    m_cTDecTop.destroy();
  }

 private:
  template <typename T>
  void xWriteOutput( TComList<TComPic*>& pcListPic, unsigned tId, PCCVideo<T, 3>& video ) {
    if ( pcListPic.empty() ) { return; }
    int         numPicsNotYetDisplayed       = 0;
    int         dpbFullness                  = 0;
    const auto& activeSPS                    = pcListPic.front()->getPicSym()->getSPS();
    const auto  maxNrSublayers               = activeSPS.getMaxTLayers();
    const auto  numReorderPicsHighestTid     = activeSPS.getNumReorderPics( maxNrSublayers - 1 );
    const auto  maxDecPicBufferingHighestTid = activeSPS.getMaxDecPicBuffering( maxNrSublayers - 1 );

    for ( const auto* pcPic : pcListPic ) {
      if ( pcPic->getOutputMark() && pcPic->getPOC() > m_iPOCLastDisplay ) {
        numPicsNotYetDisplayed++;
        dpbFullness++;
      } else if ( pcPic->getSlice( 0 )->isReferenced() ) {
        dpbFullness++;
      }
    }

    for ( auto* pcPic : pcListPic ) {
      if ( pcPic->getOutputMark() && pcPic->getPOC() > m_iPOCLastDisplay &&
           ( numPicsNotYetDisplayed > numReorderPicsHighestTid || dpbFullness > maxDecPicBufferingHighestTid ) ) {
        numPicsNotYetDisplayed--;
        if ( pcPic->getSlice( 0 )->isReferenced() == false ) { dpbFullness--; }

        xWritePicture( pcPic->getPicYuvRec(), video );
        // update POC of display order
        m_iPOCLastDisplay = pcPic->getPOC();
        // erase non-referenced comPic in the reference comPic list after
        // display
        if ( !pcPic->getSlice( 0 )->isReferenced() && pcPic->getReconMark() ) {
          pcPic->setReconMark( false );
          // mark it should be extended later
          pcPic->getPicYuvRec()->setBorderExtension( false );
        }
        pcPic->setOutputMark( false );
      }
    }
  }

  template <typename T>
  void xFlushOutput( TComList<TComPic*>& pcListPic, PCCVideo<T, 3>& video ) {
    if ( pcListPic.empty() ) { return; }
    for ( auto* pcPic : pcListPic ) {
      if ( pcPic->getOutputMark() ) {
        xWritePicture( pcPic->getPicYuvRec(), video );
        // update POC of display order
        m_iPOCLastDisplay = pcPic->getPOC();
        // erase non-referenced comPic in the reference comPic list after
        // display
        if ( !pcPic->getSlice( 0 )->isReferenced() && pcPic->getReconMark() ) {
          pcPic->setReconMark( false );
          // mark it should be extended later
          pcPic->getPicYuvRec()->setBorderExtension( false );
        }
        pcPic->setOutputMark( false );
      }
      if ( pcPic != nullptr ) {
        pcPic->destroy();
        delete pcPic;  // NOLINT(cppcoreguidelines-owning-memory)
      }
    }

    pcListPic.clear();
    m_iPOCLastDisplay = -MAX_INT;
  }

  template <typename T>
  void xWritePicture( const TComPicYuv* pic, PCCVideo<T, 3>& video ) {
    printf(
        "PCCHMVideoDecoder: write output frame: %lu sizeof( T ) = %d  size = "
        "%d %d bit depth = %d - %d = %d \n",
        video.size(), sizeof( T ), pic->getWidth( COMPONENT_Y ), pic->getHeight( COMPONENT_Y ),
        m_internalBitDepths,m_outputBitDepth[0], m_internalBitDepths - m_outputBitDepth[0] );
    fflush( stdout );
    int chromaSubsample = pic->getWidth( COMPONENT_Y ) / pic->getWidth( COMPONENT_Cb ); 
    video.resize( video.getFrameCount() + 1 );    

    auto& image = video.getFrames().back();
    image.set( pic->getAddr( COMPONENT_Y ), pic->getAddr( COMPONENT_Cb ), pic->getAddr( COMPONENT_Cr ),
               m_outputWidth, m_outputHeight, pic->getStride( COMPONENT_Y ),
               m_outputWidth / chromaSubsample, m_outputHeight / chromaSubsample,
                pic->getStride( COMPONENT_Cb ),
               m_internalBitDepths - m_outputBitDepth[0]
               , m_bRGB2GBR );
    printf("Video size = %lu \n",video.size());
  }

  TDecTop                               m_cTDecTop{};
  int                                   m_iPOCLastDisplay = -MAX_INT;
  int                                   m_iSkipFrame{};
  std::array<int, MAX_NUM_CHANNEL_TYPE> m_outputBitDepth{};
  int                                   m_internalBitDepths;
  int                                   m_outputWidth; 
  int                                   m_outputHeight;
  bool                                  m_bRGB2GBR;
};

};  // namespace pcc

#endif

#endif /* PCCHMVideoDecoder_h */
